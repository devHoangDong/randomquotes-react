{"ast":null,"code":"import _slicedToArray from \"/Users/macos/Desktop/Frontend/quotereact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/macos/Desktop/Frontend/quotereact/src/components/Dich.js\";\nimport React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nDich.propTypes = {\n  ketqua: PropTypes.string,\n  quote: PropTypes.string,\n  clear: PropTypes.bool\n};\nDich.defaultProps = {\n  ketqua: '',\n  quote: '',\n  clear: null\n};\n\nfunction Dich(props) {\n  var quote = props.quote,\n      clear = props.clear;\n  var load = clear;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      ketqua = _useState2[0],\n      setKetqua = _useState2[1];\n\n  function handleChange() {\n    load = false;\n    console.log(load);\n    var api = \"https://api.mymemory.translated.net/get?q=\".concat(quote, \"&langpair=en|vi\");\n    fetch(api).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      var kq = response.responseData.translatedText;\n      console.log(clear);\n\n      if (clear) {\n        setKetqua('');\n      } else {\n        setKetqua(kq);\n      }\n\n      ;\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  useEffect(function () {\n    handleChange();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"trans-button\",\n    onClick: handleChange(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, \"Translate\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"quote-tran\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, ketqua));\n}\n\nexport default Dich;","map":{"version":3,"sources":["/Users/macos/Desktop/Frontend/quotereact/src/components/Dich.js"],"names":["React","useState","useEffect","PropTypes","Dich","propTypes","ketqua","string","quote","clear","bool","defaultProps","props","load","setKetqua","handleChange","console","log","api","fetch","then","response","json","kq","responseData","translatedText","catch","error"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAGAC,IAAI,CAACC,SAAL,GAAiB;AACbC,EAAAA,MAAM,EAAEH,SAAS,CAACI,MADL;AAEbC,EAAAA,KAAK,EAAEL,SAAS,CAACI,MAFJ;AAGbE,EAAAA,KAAK,EAAEN,SAAS,CAACO;AAHJ,CAAjB;AAKAN,IAAI,CAACO,YAAL,GAAoB;AAChBL,EAAAA,MAAM,EAAE,EADQ;AAEhBE,EAAAA,KAAK,EAAE,EAFS;AAGhBC,EAAAA,KAAK,EAAE;AAHS,CAApB;;AAMA,SAASL,IAAT,CAAcQ,KAAd,EAAqB;AAAA,MACVJ,KADU,GACOI,KADP,CACVJ,KADU;AAAA,MACHC,KADG,GACOG,KADP,CACHH,KADG;AAEjB,MAAII,IAAI,GAAGJ,KAAX;;AAFiB,kBAGaR,QAAQ,CAAC,EAAD,CAHrB;AAAA;AAAA,MAGTK,MAHS;AAAA,MAGDQ,SAHC;;AAKjB,WAASC,YAAT,GAAwB;AACpBF,IAAAA,IAAI,GAAG,KAAP;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,QAAMK,GAAG,uDAAgDV,KAAhD,oBAAT;AACAW,IAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACM,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KADd,EAECF,IAFD,CAEM,UAAAC,QAAQ,EAAI;AACd,UAAME,EAAE,GAAGF,QAAQ,CAACG,YAAT,CAAsBC,cAAjC;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;;AACA,UAAIA,KAAJ,EAAW;AACXK,QAAAA,SAAS,CAAC,EAAD,CAAT;AACC,OAFD,MAEO;AAACA,QAAAA,SAAS,CAACS,EAAD,CAAT;AAAc;;AAAA;AACzB,KARD,EASCG,KATD,CASO,UAACC,KAAD,EAAW;AACdX,MAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AACD,KAXH;AAYH;;AACDzB,EAAAA,SAAS,CAAC,YAAM;AACZa,IAAAA,YAAY;AACf,GAFQ,EAEP,EAFO,CAAT;AAGI,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,SAAS,EAAC,cAAlB;AAAiC,IAAA,OAAO,EAAEA,YAAY,EAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,eAEI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BT,MAA7B,CAFJ,CADJ;AAMP;;AACD,eAAeF,IAAf","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nDich.propTypes = {\r\n    ketqua: PropTypes.string,\r\n    quote: PropTypes.string,\r\n    clear: PropTypes.bool,\r\n}\r\nDich.defaultProps = {\r\n    ketqua: '',\r\n    quote: '',\r\n    clear: null,\r\n}\r\n\r\nfunction Dich(props) {\r\n    const{ quote, clear } = props; \r\n    var load = clear;\r\n    const [ ketqua, setKetqua ] = useState('');\r\n\r\n    function handleChange() {\r\n        load = false;\r\n        console.log(load);\r\n        const api = `https://api.mymemory.translated.net/get?q=${quote}&langpair=en|vi`;\r\n        fetch(api)\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            const kq = response.responseData.translatedText;\r\n            console.log(clear);\r\n            if (clear) {\r\n            setKetqua('');\r\n            } else {setKetqua(kq)};\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n          })\r\n    }\r\n    useEffect(() => {\r\n        handleChange()\r\n    },[])\r\n        return (\r\n            <div>\r\n                <button className=\"trans-button\" onClick={handleChange()}>Translate</button>\r\n                <div className=\"quote-tran\">{ketqua}</div>\r\n            </div>\r\n            )\r\n}\r\nexport default Dich;"]},"metadata":{},"sourceType":"module"}