{"ast":null,"code":"import _slicedToArray from \"/Users/macos/Desktop/Frontend/quotereact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/macos/Desktop/Frontend/quotereact/src/components/Dich.js\";\nimport React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nDich.propTypes = {\n  ketqua: PropTypes.object,\n  isLoading: PropTypes.bool,\n  cleartran: PropTypes.bool,\n  quote: PropTypes.string,\n  clear: PropTypes.bool\n};\nDich.defaultProps = {\n  ketqua: null,\n  isLoading: null,\n  cleartran: null,\n  quote: '',\n  clear: null\n};\n\nfunction Dich(props) {\n  var quote = props.quote,\n      clear = props.clear;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      ketqua = _useState2[0],\n      setKetqua = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cleartran = _useState6[0],\n      setCleartran = _useState6[1];\n\n  function handleChange() {\n    console.log(this.props.quote);\n    var api = \"https://api.mymemory.translated.net/get?q=\".concat(this.props.quote, \"&langpair=en|vi\");\n    fetch(api).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      setKetqua(response);\n      setIsLoading(true);\n      setCleartran(!cleartran);\n      console.log(cleartran);\n    });\n  }\n\n  useEffect(function () {\n    if (cleartran !== clear) {\n      setCleartran(true);\n      console.log(cleartran);\n    }\n  });\n\n  if (isLoading && !cleartran) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"trans-button\",\n      onClick: handleChange(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, \"Translate\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quote-tran\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, ketqua.responseData.translatedText));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"trans-button\",\n      onClick: handleChange(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, \"Translate\"));\n  }\n}\n\nexport default Dich;","map":{"version":3,"sources":["/Users/macos/Desktop/Frontend/quotereact/src/components/Dich.js"],"names":["React","useState","useEffect","PropTypes","Dich","propTypes","ketqua","object","isLoading","bool","cleartran","quote","string","clear","defaultProps","props","setKetqua","setIsLoading","setCleartran","handleChange","console","log","api","fetch","then","response","json","responseData","translatedText"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAGAC,IAAI,CAACC,SAAL,GAAiB;AACbC,EAAAA,MAAM,EAAEH,SAAS,CAACI,MADL;AAEbC,EAAAA,SAAS,EAAEL,SAAS,CAACM,IAFR;AAGbC,EAAAA,SAAS,EAAEP,SAAS,CAACM,IAHR;AAIbE,EAAAA,KAAK,EAAER,SAAS,CAACS,MAJJ;AAKbC,EAAAA,KAAK,EAAEV,SAAS,CAACM;AALJ,CAAjB;AAOAL,IAAI,CAACU,YAAL,GAAoB;AAChBR,EAAAA,MAAM,EAAE,IADQ;AAEhBE,EAAAA,SAAS,EAAE,IAFK;AAGhBE,EAAAA,SAAS,EAAE,IAHK;AAIhBC,EAAAA,KAAK,EAAE,EAJS;AAKhBE,EAAAA,KAAK,EAAE;AALS,CAApB;;AAQA,SAAST,IAAT,CAAcW,KAAd,EAAqB;AAAA,MAEVJ,KAFU,GAEOI,KAFP,CAEVJ,KAFU;AAAA,MAEHE,KAFG,GAEOE,KAFP,CAEHF,KAFG;;AAAA,kBAGaZ,QAAQ,CAAC,EAAD,CAHrB;AAAA;AAAA,MAGTK,MAHS;AAAA,MAGDU,SAHC;;AAAA,mBAIiBf,QAAQ,CAAC,IAAD,CAJzB;AAAA;AAAA,MAIVO,SAJU;AAAA,MAICS,YAJD;;AAAA,mBAKiBhB,QAAQ,CAAC,IAAD,CALzB;AAAA;AAAA,MAKVS,SALU;AAAA,MAKCQ,YALD;;AAOjB,WAASC,YAAT,GAAwB;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAL,CAAWJ,KAAvB;AACA,QAAMW,GAAG,uDAAgD,KAAKP,KAAL,CAAWJ,KAA3D,oBAAT;AACAY,IAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACM,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KADd,EAECF,IAFD,CAEM,UAAAC,QAAQ,EAAI;AACdT,MAAAA,SAAS,CAACS,QAAD,CAAT;AACAR,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAC,MAAAA,YAAY,CAAC,CAACR,SAAF,CAAZ;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;AACH,KAPD;AAQH;;AACDR,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAGQ,SAAS,KAAKG,KAAjB,EAAwB;AACxBK,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;AACC;AACJ,GALQ,CAAT;;AAOA,MAAIF,SAAS,IAAI,CAACE,SAAlB,EAA6B;AACzB,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,SAAS,EAAC,cAAlB;AAAiC,MAAA,OAAO,EAAES,YAAY,EAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAEI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6Bb,MAAM,CAACqB,YAAP,CAAoBC,cAAjD,CAFJ,CADJ;AAMC,GAPL,MAOW;AACH,wBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAQ,MAAA,SAAS,EAAC,cAAlB;AAAiC,MAAA,OAAO,EAAET,YAAY,EAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADA,CADA;AAIH;AACR;;AACD,eAAef,IAAf","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nDich.propTypes = {\r\n    ketqua: PropTypes.object,\r\n    isLoading: PropTypes.bool,\r\n    cleartran: PropTypes.bool,\r\n    quote: PropTypes.string,\r\n    clear: PropTypes.bool,\r\n}\r\nDich.defaultProps = {\r\n    ketqua: null,\r\n    isLoading: null,\r\n    cleartran: null,\r\n    quote: '',\r\n    clear: null,\r\n}\r\n\r\nfunction Dich(props) {\r\n        \r\n    const{ quote, clear } = props; \r\n    const [ ketqua, setKetqua ] = useState({});\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [cleartran, setCleartran] = useState(true);\r\n\r\n    function handleChange() {\r\n        console.log(this.props.quote)\r\n        const api = `https://api.mymemory.translated.net/get?q=${this.props.quote}&langpair=en|vi`;\r\n        fetch(api)\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            setKetqua(response);\r\n            setIsLoading(true);\r\n            setCleartran(!cleartran);\r\n            console.log(cleartran)\r\n        });\r\n    }\r\n    useEffect(() => {\r\n        if(cleartran !== clear) {\r\n        setCleartran(true);\r\n        console.log(cleartran)\r\n        }\r\n    },)\r\n\r\n    if (isLoading && !cleartran) {\r\n        return (\r\n            <div>\r\n                <button className=\"trans-button\" onClick={handleChange()}>Translate</button>\r\n                <div className=\"quote-tran\">{ketqua.responseData.translatedText}</div>\r\n            </div>\r\n            )\r\n        } else {\r\n            return (\r\n            <div>\r\n            <button className=\"trans-button\" onClick={handleChange()}>Translate</button>\r\n            </div>)\r\n        }\r\n}\r\nexport default Dich;"]},"metadata":{},"sourceType":"module"}